// Obtain current hostname
def hostname = "hostname".execute().text.trim().replace("-", "")

// Check if this configuration is being loaded on the expected cluster
def expectedHostname = "h" // 

if (!hostname.startsWith(expectedHostname)) {
    throw new IllegalStateException("""
    ===============================================================
    ERROR: You are trying to run the pipeline on the '${hostname}' cluster
    but the configuration is specifically for the Hercules cluster with hostname starting with '${expectedHostname}'.
    Please ensure you're using the correct configuration/profile.
    ===============================================================
    """.stripIndent())
}
 
 module = ['jdk/17.0.6']

//Set up apptainer containers and mount path
    apptainer {
        enabled = true
        runOptions = '--env PYTHONNOUSERSITE=1 --nv -B /hercules -B /mandap -B /mkfs'
        envWhitelist = 'APPTAINER_BINDPATH, APPTAINER_LD_LIBRARY_PATH'
    }

    env {
        APPTAINER_IMAGE_PATH = "/hercules/scratch/vishnu/singularity_images"
    }

    params {
        
        
        hardware = "Hercules"

        apptainer_images {

        peasoup = "${env.APPTAINER_IMAGE_PATH}/peasoup_latest.sif"
        presto = "${env.APPTAINER_IMAGE_PATH}/pulsar-miner_turing-sm75.sif"
        pulsarx = "${env.APPTAINER_IMAGE_PATH}/pulsarx_dev1.sif" 
        pics  = "${env.APPTAINER_IMAGE_PATH}/pics_20230630_pics_model_update.sif"
        candy_picker = "${env.APPTAINER_IMAGE_PATH}/candy_picker_latest.sif"

        }
        
    }



   // SLURM Executor for Hercules

   executor {
        name = 'slurm'               
        pollInterval = '10 seconds'       // Determines how often to check for process termination. 
        queueSize = 10000               // Maximum number of jobs submitted at once
    }

    process {

        withLabel: 'CaReFuL_filtool' {
            cpus = 20
            memory = { 10.GB * task.attempt }
            queue = { (task.time <= 4.hour) ? "short.q" : "long.q" }
            time = { 4.hour * task.attempt }  
            errorStrategy = { task.exitStatus in (137..140) || task.exitStatus == 124 ? 'retry' : 'ignore' }
            maxRetries = 3
            maxForks = 15

        }

        withLabel: 'CaReFuL_get_fft_size' {
            cpus= 1
            memory = { 1.GB }
            queue = "short.q"
            time = '10m'
            errorStrategy = { task.exitStatus in (137..140) || task.exitStatus == 124 ? 'retry' : 'ignore' }
            maxRetries = 3
            maxForks = 5000
        }

        withLabel: 'CaReFuL_shortlist_folds' {
            cpus = 1
            memory = { 1.GB }
            queue = "short.q"
            time =  '10m'
            errorStrategy = { task.exitStatus in (137..140) || task.exitStatus == 124 ? 'retry' : 'ignore' }
            maxRetries = 3
            maxForks = 5000
        }

        withLabel: 'CaReFuL_pulsarx' {
            cpus = 10
            memory = { 20.GB * task.attempt }
            queue = { (task.time <= 4.hour) ? "short.q" : "long.q" }
            time = { 4.hour * task.attempt }  // 4h, 8h, etc.
            errorStrategy = { task.exitStatus in (137..140) || task.exitStatus == 124 ? 'retry' : 'ignore' }
            maxRetries = 3
            maxForks = 400

        }

        withLabel: 'CaReFuL_peasoup' {
            cpus = 1
            memory = { 80.GB * task.attempt }
            queue = { (task.time <= 4.hour) ? "short.q" : "gpu.q" }
            time = { 36.hour * task.attempt }   // 4h, 8h, etc.
            errorStrategy = { task.exitStatus in (137..140) || task.exitStatus == 124 ? 'retry' : 'ignore' }
            clusterOptions = '--gres=gpu:1'
            maxRetries = 3
            maxForks = 200
        }

    }